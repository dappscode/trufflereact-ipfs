{"ast":null,"code":"import _toConsumableArray from \"/home/eth/ipfs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/eth/ipfs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/eth/ipfs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/eth/ipfs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/eth/ipfs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/eth/ipfs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/eth/ipfs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/eth/ipfs/src/App.js\";\n\nvar React = require('react'); //const IPFS = require('ipfs-mini');\n\n\nvar ipfsClient = require('ipfs-http-client'); //const ipfs = new IPFS({ host: 'ipfs.infura.io', port: 5001, protocol: 'https' });\n//const ipfs = ipfsClient({ host: 'ipfs.infura.io', port: 5001, protocol: 'https' });\n\n\nvar App =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(App, _React$Component);\n\n  function App() {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this));\n    _this.state = {\n      added_file_hash: null\n    };\n    _this.ipfs = ipfsClient({\n      host: 'ipfs.infura.io',\n      port: 5001,\n      protocol: 'https'\n    }); // bind methods\n\n    _this.captureFile = _this.captureFile.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.saveToIpfs = _this.saveToIpfs.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"captureFile\",\n    value: function captureFile(event) {\n      event.stopPropagation();\n      event.preventDefault();\n\n      if (document.getElementById('keepFilename').checked) {\n        this.saveToIpfsWithFilename(event.target.files);\n      } else {\n        this.saveToIpfs(event.target.files);\n      }\n    } // Example #1\n    // Add file to IPFS and return a CID\n\n  }, {\n    key: \"saveToIpfs\",\n    value: function saveToIpfs(files) {\n      var _this2 = this;\n\n      var ipfsId;\n      this.ipfs.add(_toConsumableArray(files), {\n        progress: function progress(prog) {\n          return console.log(\"received: \".concat(prog));\n        }\n      }).then(function (response) {\n        console.log(response);\n        ipfsId = response[0].hash;\n        console.log(ipfsId);\n\n        _this2.setState({\n          added_file_hash: ipfsId\n        });\n      }).catch(function (err) {\n        console.error(err);\n      });\n    } // Example #2\n    // Add file to IPFS and wrap it in a directory to keep the original filename\n\n  }, {\n    key: \"saveToIpfsWithFilename\",\n    value: function saveToIpfsWithFilename(files) {\n      var _this3 = this;\n\n      var file = _toConsumableArray(files)[0];\n\n      var ipfsId;\n      var fileDetails = {\n        path: file.name,\n        content: file\n      };\n      var options = {\n        wrapWithDirectory: true,\n        progress: function progress(prog) {\n          return console.log(\"received: \".concat(prog));\n        }\n      };\n      this.ipfs.add(fileDetails, options).then(function (response) {\n        console.log(response); // CID of wrapping directory is returned last\n\n        ipfsId = response[response.length - 1].hash;\n        console.log(ipfsId);\n\n        _this3.setState({\n          added_file_hash: ipfsId\n        });\n      }).catch(function (err) {\n        console.error(err);\n      });\n    }\n  }, {\n    key: \"handleSubmit\",\n    value: function handleSubmit(event) {\n      event.preventDefault();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        id: \"captureMedia\",\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"file\",\n        onChange: this.captureFile,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        htmlFor: \"keepFilename\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"checkbox\",\n        id: \"keepFilename\",\n        name: \"keepFilename\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }), \" keep filename\")), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        target: \"_blank\",\n        href: 'https://ipfs.io/ipfs/' + this.state.added_file_hash,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, this.state.added_file_hash)));\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nexport default App;","map":{"version":3,"sources":["/home/eth/ipfs/src/App.js"],"names":["React","require","ipfsClient","App","state","added_file_hash","ipfs","host","port","protocol","captureFile","bind","saveToIpfs","handleSubmit","event","stopPropagation","preventDefault","document","getElementById","checked","saveToIpfsWithFilename","target","files","ipfsId","add","progress","prog","console","log","then","response","hash","setState","catch","err","error","file","fileDetails","path","name","content","options","wrapWithDirectory","length","Component"],"mappings":"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","sourcesContent":["const React = require('react')\n//const IPFS = require('ipfs-mini');\nconst ipfsClient = require('ipfs-http-client');\n//const ipfs = new IPFS({ host: 'ipfs.infura.io', port: 5001, protocol: 'https' });\n//const ipfs = ipfsClient({ host: 'ipfs.infura.io', port: 5001, protocol: 'https' });\n\nclass App extends React.Component {\n  constructor () {\n    super()\n    this.state = {\n      added_file_hash: null\n    }\n    this.ipfs = ipfsClient({ host: 'ipfs.infura.io', port: 5001, protocol: 'https' })\n\n    // bind methods\n    this.captureFile = this.captureFile.bind(this)\n    this.saveToIpfs = this.saveToIpfs.bind(this)\n    this.handleSubmit = this.handleSubmit.bind(this)\n  }\n\n  captureFile (event) {\n    event.stopPropagation()\n    event.preventDefault()\n    if (document.getElementById('keepFilename').checked) {\n      this.saveToIpfsWithFilename(event.target.files)\n    } else {\n      this.saveToIpfs(event.target.files)\n    }\n  }\n\n  // Example #1\n  // Add file to IPFS and return a CID\n  saveToIpfs (files) {\n    let ipfsId\n    this.ipfs.add([...files], { progress: (prog) => console.log(`received: ${prog}`) })\n      .then((response) => {\n        console.log(response)\n        ipfsId = response[0].hash\n        console.log(ipfsId)\n        this.setState({ added_file_hash: ipfsId })\n      }).catch((err) => {\n        console.error(err)\n      })\n  }\n\n  // Example #2\n  // Add file to IPFS and wrap it in a directory to keep the original filename\n  saveToIpfsWithFilename (files) {\n    const file = [...files][0]\n    let ipfsId\n    const fileDetails = {\n      path: file.name,\n      content: file\n    }\n    const options = {\n      wrapWithDirectory: true,\n      progress: (prog) => console.log(`received: ${prog}`)\n    }\n    this.ipfs.add(fileDetails, options)\n      .then((response) => {\n        console.log(response)\n        // CID of wrapping directory is returned last\n        ipfsId = response[response.length - 1].hash\n        console.log(ipfsId)\n        this.setState({ added_file_hash: ipfsId })\n      }).catch((err) => {\n        console.error(err)\n      })\n  }\n\n  handleSubmit (event) {\n    event.preventDefault()\n  }\n\n  render () {\n    return (\n      <div>\n        <form id='captureMedia' onSubmit={this.handleSubmit}>\n          <input type='file' onChange={this.captureFile} /><br/>\n          <label htmlFor='keepFilename'><input type='checkbox' id='keepFilename' name='keepFilename' /> keep filename</label>\n        </form>\n        <div>\n          <a target='_blank'\n            href={'https://ipfs.io/ipfs/' + this.state.added_file_hash}>\n            {this.state.added_file_hash}\n          </a>\n        </div>\n      </div>\n    )\n  }\n}\nexport default App;"]},"metadata":{},"sourceType":"module"}