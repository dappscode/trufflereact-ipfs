{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/home/eth/ipfs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _awaitAsyncGenerator = require(\"/home/eth/ipfs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/home/eth/ipfs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"/home/eth/ipfs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar CID = require('cids');\n\nvar ndjson = require('iterable-ndjson');\n\nvar toIterable = require('../lib/stream-to-iterable');\n\nvar configure = require('../lib/configure');\n\nvar toCamelWithMetadata = require('../lib/object-to-camel-with-metadata');\n\nmodule.exports = configure(function (_ref) {\n  var ky = _ref.ky;\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ls = _wrapAsyncGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(path, options) {\n        var searchParams, res, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, result, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, entry;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (typeof path !== 'string') {\n                  options = path;\n                  path = '/';\n                }\n\n                options = options || {};\n                searchParams = new URLSearchParams(options.searchParams);\n                searchParams.set('arg', CID.isCID(path) ? \"/ipfs/\".concat(path) : path);\n                searchParams.set('stream', true);\n                if (options.cidBase) searchParams.set('cid-base', options.cidBase);\n                if (options.long != null) searchParams.set('long', options.long);\n                _context.next = 9;\n                return _awaitAsyncGenerator(ky.post('files/ls', {\n                  timeout: options.timeout,\n                  signal: options.signal,\n                  headers: options.headers,\n                  searchParams: searchParams\n                }));\n\n              case 9:\n                res = _context.sent;\n                _iteratorNormalCompletion = true;\n                _didIteratorError = false;\n                _context.prev = 12;\n                _iterator = _asyncIterator(ndjson(toIterable(res.body)));\n\n              case 14:\n                _context.next = 16;\n                return _awaitAsyncGenerator(_iterator.next());\n\n              case 16:\n                _step = _context.sent;\n                _iteratorNormalCompletion = _step.done;\n                _context.next = 20;\n                return _awaitAsyncGenerator(_step.value);\n\n              case 20:\n                _value = _context.sent;\n\n                if (_iteratorNormalCompletion) {\n                  _context.next = 56;\n                  break;\n                }\n\n                result = _value;\n\n                if (!('Entries' in result)) {\n                  _context.next = 51;\n                  break;\n                }\n\n                _iteratorNormalCompletion2 = true;\n                _didIteratorError2 = false;\n                _iteratorError2 = undefined;\n                _context.prev = 27;\n                _iterator2 = (result.Entries || [])[Symbol.iterator]();\n\n              case 29:\n                if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {\n                  _context.next = 36;\n                  break;\n                }\n\n                entry = _step2.value;\n                _context.next = 33;\n                return toCamelWithMetadata(entry);\n\n              case 33:\n                _iteratorNormalCompletion2 = true;\n                _context.next = 29;\n                break;\n\n              case 36:\n                _context.next = 42;\n                break;\n\n              case 38:\n                _context.prev = 38;\n                _context.t0 = _context[\"catch\"](27);\n                _didIteratorError2 = true;\n                _iteratorError2 = _context.t0;\n\n              case 42:\n                _context.prev = 42;\n                _context.prev = 43;\n\n                if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                  _iterator2.return();\n                }\n\n              case 45:\n                _context.prev = 45;\n\n                if (!_didIteratorError2) {\n                  _context.next = 48;\n                  break;\n                }\n\n                throw _iteratorError2;\n\n              case 48:\n                return _context.finish(45);\n\n              case 49:\n                return _context.finish(42);\n\n              case 50:\n                return _context.abrupt(\"return\");\n\n              case 51:\n                _context.next = 53;\n                return toCamelWithMetadata(result);\n\n              case 53:\n                _iteratorNormalCompletion = true;\n                _context.next = 14;\n                break;\n\n              case 56:\n                _context.next = 62;\n                break;\n\n              case 58:\n                _context.prev = 58;\n                _context.t1 = _context[\"catch\"](12);\n                _didIteratorError = true;\n                _iteratorError = _context.t1;\n\n              case 62:\n                _context.prev = 62;\n                _context.prev = 63;\n\n                if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                  _context.next = 67;\n                  break;\n                }\n\n                _context.next = 67;\n                return _awaitAsyncGenerator(_iterator.return());\n\n              case 67:\n                _context.prev = 67;\n\n                if (!_didIteratorError) {\n                  _context.next = 70;\n                  break;\n                }\n\n                throw _iteratorError;\n\n              case 70:\n                return _context.finish(67);\n\n              case 71:\n                return _context.finish(62);\n\n              case 72:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[12, 58, 62, 72], [27, 38, 42, 50], [43,, 45, 49], [63,, 67, 71]]);\n      }));\n\n      function ls(_x, _x2) {\n        return _ls.apply(this, arguments);\n      }\n\n      return ls;\n    }()\n  );\n});","map":null,"metadata":{},"sourceType":"script"}