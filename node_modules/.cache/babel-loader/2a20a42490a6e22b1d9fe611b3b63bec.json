{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/home/eth/ipfs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _wrapAsyncGenerator = require(\"/home/eth/ipfs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _awaitAsyncGenerator = require(\"/home/eth/ipfs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _asyncIterator = require(\"/home/eth/ipfs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar _asyncGeneratorDelegate = require(\"/home/eth/ipfs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncGeneratorDelegate\");\n\nvar kyDefault = require('ky-universal').default;\n\nvar toIterable = require('./lib/stream-to-iterable');\n\nmodule.exports = function (config) {\n  var add = require('./add')(config);\n\n  return (\n    /*#__PURE__*/\n    function () {\n      var _addFromURL = _wrapAsyncGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(url, options) {\n        var _ref, body, input;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                options = options || {};\n                _context.next = 3;\n                return _awaitAsyncGenerator(kyDefault.get(url));\n\n              case 3:\n                _ref = _context.sent;\n                body = _ref.body;\n                input = {\n                  path: decodeURIComponent(new URL(url).pathname.split('/').pop() || ''),\n                  content: toIterable(body)\n                };\n                return _context.delegateYield(_asyncGeneratorDelegate(_asyncIterator(add(input, options)), _awaitAsyncGenerator), \"t0\", 7);\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function addFromURL(_x, _x2) {\n        return _addFromURL.apply(this, arguments);\n      }\n\n      return addFromURL;\n    }()\n  );\n};","map":null,"metadata":{},"sourceType":"script"}