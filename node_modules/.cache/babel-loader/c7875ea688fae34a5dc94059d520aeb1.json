{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/home/eth/ipfs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/eth/ipfs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _awaitAsyncGenerator = require(\"/home/eth/ipfs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/home/eth/ipfs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"/home/eth/ipfs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar isIPFS = require('is-ipfs');\n\nvar _require = require('buffer'),\n    Buffer = _require.Buffer;\n\nvar CID = require('cids');\n\nvar multiaddr = require('multiaddr');\n\nvar multibase = require('multibase');\n\nvar multicodec = require('multicodec');\n\nvar multihash = require('multihashes');\n\nvar PeerId = require('peer-id');\n\nvar PeerInfo = require('peer-info');\n\nvar nodeify = require('promise-nodeify');\n\nvar callbackify = require('callbackify');\n\nvar all = require('it-all');\n\nvar toPullStream = require('async-iterator-to-pull-stream');\n\nvar toStream = require('it-to-stream');\n\nvar BufferList = require('bl/BufferList');\n\nvar _require2 = require('./lib/converters'),\n    concatify = _require2.concatify,\n    collectify = _require2.collectify,\n    pullify = _require2.pullify,\n    streamify = _require2.streamify;\n\nfunction ipfsClient(config) {\n  var _add = require('./add')(config);\n\n  var _addFromFs = require('./add-from-fs')(config);\n\n  var _addFromURL = require('./add-from-url')(config);\n\n  var cat = require('./cat')(config);\n\n  var get = require('./get')(config);\n\n  var ls = require('./ls')(config);\n\n  var ping = require('./ping')(config);\n\n  var refs = require('./refs')(config);\n\n  var api = {\n    add: function add(input, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      return nodeify(collectify(_add)(input, options), callback);\n    },\n    addReadableStream: streamify.transform(_add),\n    addPullStream: pullify.transform(_add),\n    addFromFs: function addFromFs(path, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      return nodeify(collectify(_addFromFs)(path, options), callback);\n    },\n    addFromURL: function addFromURL(url, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      return nodeify(collectify(_addFromURL)(url, options), callback);\n    },\n    addFromStream: function addFromStream(input, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      return nodeify(collectify(_add)(input, options), callback);\n    },\n    _addAsyncIterator: _add,\n    bitswap: require('./bitswap')(config),\n    block: require('./block')(config),\n    bootstrap: require('./bootstrap')(config),\n    cat: callbackify.variadic(function (path, options) {\n      return concatify(cat)(path, options);\n    }),\n    catReadableStream: streamify.readable(cat),\n    catPullStream: pullify.source(cat),\n    _catAsyncIterator: cat,\n    commands: callbackify.variadic(require('./commands')(config)),\n    config: require('./config')(config),\n    dag: require('./dag')(config),\n    dht: require('./dht')(config),\n    diag: require('./diag')(config),\n    dns: callbackify.variadic(require('./dns')(config)),\n    files: require('./files')(config),\n    get: callbackify.variadic(\n    /*#__PURE__*/\n    function () {\n      var _ref5 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(path, options) {\n        var output, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, entry;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                output = [];\n                _iteratorNormalCompletion = true;\n                _didIteratorError = false;\n                _context.prev = 3;\n                _iterator = _asyncIterator(get(path, options));\n\n              case 5:\n                _context.next = 7;\n                return _iterator.next();\n\n              case 7:\n                _step = _context.sent;\n                _iteratorNormalCompletion = _step.done;\n                _context.next = 11;\n                return _step.value;\n\n              case 11:\n                _value = _context.sent;\n\n                if (_iteratorNormalCompletion) {\n                  _context.next = 24;\n                  break;\n                }\n\n                entry = _value;\n\n                if (!entry.content) {\n                  _context.next = 20;\n                  break;\n                }\n\n                _context.t0 = BufferList;\n                _context.next = 18;\n                return all(entry.content);\n\n              case 18:\n                _context.t1 = _context.sent;\n                entry.content = new _context.t0(_context.t1).slice();\n\n              case 20:\n                output.push(entry);\n\n              case 21:\n                _iteratorNormalCompletion = true;\n                _context.next = 5;\n                break;\n\n              case 24:\n                _context.next = 30;\n                break;\n\n              case 26:\n                _context.prev = 26;\n                _context.t2 = _context[\"catch\"](3);\n                _didIteratorError = true;\n                _iteratorError = _context.t2;\n\n              case 30:\n                _context.prev = 30;\n                _context.prev = 31;\n\n                if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                  _context.next = 35;\n                  break;\n                }\n\n                _context.next = 35;\n                return _iterator.return();\n\n              case 35:\n                _context.prev = 35;\n\n                if (!_didIteratorError) {\n                  _context.next = 38;\n                  break;\n                }\n\n                throw _iteratorError;\n\n              case 38:\n                return _context.finish(35);\n\n              case 39:\n                return _context.finish(30);\n\n              case 40:\n                return _context.abrupt(\"return\", output);\n\n              case 41:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[3, 26, 30, 40], [31,, 35, 39]]);\n      }));\n\n      return function (_x5, _x6) {\n        return _ref5.apply(this, arguments);\n      };\n    }()),\n    getEndpointConfig: require('./get-endpoint-config')(config),\n    getReadableStream: streamify.readable(\n    /*#__PURE__*/\n    function () {\n      var _ref = _wrapAsyncGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(path, options) {\n        var _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _value2, file;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _iteratorNormalCompletion2 = true;\n                _didIteratorError2 = false;\n                _context3.prev = 2;\n                _iterator2 = _asyncIterator(get(path, options));\n\n              case 4:\n                _context3.next = 6;\n                return _awaitAsyncGenerator(_iterator2.next());\n\n              case 6:\n                _step2 = _context3.sent;\n                _iteratorNormalCompletion2 = _step2.done;\n                _context3.next = 10;\n                return _awaitAsyncGenerator(_step2.value);\n\n              case 10:\n                _value2 = _context3.sent;\n\n                if (_iteratorNormalCompletion2) {\n                  _context3.next = 19;\n                  break;\n                }\n\n                file = _value2;\n\n                if (file.content) {\n                  (function () {\n                    var content = file.content;\n                    file.content = toStream(_wrapAsyncGenerator(\n                    /*#__PURE__*/\n                    _regeneratorRuntime.mark(function _callee2() {\n                      var _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, _value3, chunk;\n\n                      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                        while (1) {\n                          switch (_context2.prev = _context2.next) {\n                            case 0:\n                              _iteratorNormalCompletion3 = true;\n                              _didIteratorError3 = false;\n                              _context2.prev = 2;\n                              _iterator3 = _asyncIterator(content);\n\n                            case 4:\n                              _context2.next = 6;\n                              return _awaitAsyncGenerator(_iterator3.next());\n\n                            case 6:\n                              _step3 = _context2.sent;\n                              _iteratorNormalCompletion3 = _step3.done;\n                              _context2.next = 10;\n                              return _awaitAsyncGenerator(_step3.value);\n\n                            case 10:\n                              _value3 = _context2.sent;\n\n                              if (_iteratorNormalCompletion3) {\n                                _context2.next = 18;\n                                break;\n                              }\n\n                              chunk = _value3;\n                              _context2.next = 15;\n                              return chunk.slice();\n\n                            case 15:\n                              _iteratorNormalCompletion3 = true;\n                              _context2.next = 4;\n                              break;\n\n                            case 18:\n                              _context2.next = 24;\n                              break;\n\n                            case 20:\n                              _context2.prev = 20;\n                              _context2.t0 = _context2[\"catch\"](2);\n                              _didIteratorError3 = true;\n                              _iteratorError3 = _context2.t0;\n\n                            case 24:\n                              _context2.prev = 24;\n                              _context2.prev = 25;\n\n                              if (!(!_iteratorNormalCompletion3 && _iterator3.return != null)) {\n                                _context2.next = 29;\n                                break;\n                              }\n\n                              _context2.next = 29;\n                              return _awaitAsyncGenerator(_iterator3.return());\n\n                            case 29:\n                              _context2.prev = 29;\n\n                              if (!_didIteratorError3) {\n                                _context2.next = 32;\n                                break;\n                              }\n\n                              throw _iteratorError3;\n\n                            case 32:\n                              return _context2.finish(29);\n\n                            case 33:\n                              return _context2.finish(24);\n\n                            case 34:\n                            case \"end\":\n                              return _context2.stop();\n                          }\n                        }\n                      }, _callee2, null, [[2, 20, 24, 34], [25,, 29, 33]]);\n                    }))());\n                  })();\n                }\n\n                _context3.next = 16;\n                return file;\n\n              case 16:\n                _iteratorNormalCompletion2 = true;\n                _context3.next = 4;\n                break;\n\n              case 19:\n                _context3.next = 25;\n                break;\n\n              case 21:\n                _context3.prev = 21;\n                _context3.t0 = _context3[\"catch\"](2);\n                _didIteratorError2 = true;\n                _iteratorError2 = _context3.t0;\n\n              case 25:\n                _context3.prev = 25;\n                _context3.prev = 26;\n\n                if (!(!_iteratorNormalCompletion2 && _iterator2.return != null)) {\n                  _context3.next = 30;\n                  break;\n                }\n\n                _context3.next = 30;\n                return _awaitAsyncGenerator(_iterator2.return());\n\n              case 30:\n                _context3.prev = 30;\n\n                if (!_didIteratorError2) {\n                  _context3.next = 33;\n                  break;\n                }\n\n                throw _iteratorError2;\n\n              case 33:\n                return _context3.finish(30);\n\n              case 34:\n                return _context3.finish(25);\n\n              case 35:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, null, [[2, 21, 25, 35], [26,, 30, 34]]);\n      }));\n\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }()),\n    getPullStream: pullify.source(\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _wrapAsyncGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(path, options) {\n        var _iteratorNormalCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, _value4, file;\n\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _iteratorNormalCompletion4 = true;\n                _didIteratorError4 = false;\n                _context5.prev = 2;\n                _iterator4 = _asyncIterator(get(path, options));\n\n              case 4:\n                _context5.next = 6;\n                return _awaitAsyncGenerator(_iterator4.next());\n\n              case 6:\n                _step4 = _context5.sent;\n                _iteratorNormalCompletion4 = _step4.done;\n                _context5.next = 10;\n                return _awaitAsyncGenerator(_step4.value);\n\n              case 10:\n                _value4 = _context5.sent;\n\n                if (_iteratorNormalCompletion4) {\n                  _context5.next = 19;\n                  break;\n                }\n\n                file = _value4;\n\n                if (file.content) {\n                  (function () {\n                    var content = file.content;\n                    file.content = toPullStream(_wrapAsyncGenerator(\n                    /*#__PURE__*/\n                    _regeneratorRuntime.mark(function _callee4() {\n                      var _iteratorNormalCompletion5, _didIteratorError5, _iteratorError5, _iterator5, _step5, _value5, chunk;\n\n                      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n                        while (1) {\n                          switch (_context4.prev = _context4.next) {\n                            case 0:\n                              _iteratorNormalCompletion5 = true;\n                              _didIteratorError5 = false;\n                              _context4.prev = 2;\n                              _iterator5 = _asyncIterator(content);\n\n                            case 4:\n                              _context4.next = 6;\n                              return _awaitAsyncGenerator(_iterator5.next());\n\n                            case 6:\n                              _step5 = _context4.sent;\n                              _iteratorNormalCompletion5 = _step5.done;\n                              _context4.next = 10;\n                              return _awaitAsyncGenerator(_step5.value);\n\n                            case 10:\n                              _value5 = _context4.sent;\n\n                              if (_iteratorNormalCompletion5) {\n                                _context4.next = 18;\n                                break;\n                              }\n\n                              chunk = _value5;\n                              _context4.next = 15;\n                              return chunk.slice();\n\n                            case 15:\n                              _iteratorNormalCompletion5 = true;\n                              _context4.next = 4;\n                              break;\n\n                            case 18:\n                              _context4.next = 24;\n                              break;\n\n                            case 20:\n                              _context4.prev = 20;\n                              _context4.t0 = _context4[\"catch\"](2);\n                              _didIteratorError5 = true;\n                              _iteratorError5 = _context4.t0;\n\n                            case 24:\n                              _context4.prev = 24;\n                              _context4.prev = 25;\n\n                              if (!(!_iteratorNormalCompletion5 && _iterator5.return != null)) {\n                                _context4.next = 29;\n                                break;\n                              }\n\n                              _context4.next = 29;\n                              return _awaitAsyncGenerator(_iterator5.return());\n\n                            case 29:\n                              _context4.prev = 29;\n\n                              if (!_didIteratorError5) {\n                                _context4.next = 32;\n                                break;\n                              }\n\n                              throw _iteratorError5;\n\n                            case 32:\n                              return _context4.finish(29);\n\n                            case 33:\n                              return _context4.finish(24);\n\n                            case 34:\n                            case \"end\":\n                              return _context4.stop();\n                          }\n                        }\n                      }, _callee4, null, [[2, 20, 24, 34], [25,, 29, 33]]);\n                    }))());\n                  })();\n                }\n\n                _context5.next = 16;\n                return file;\n\n              case 16:\n                _iteratorNormalCompletion4 = true;\n                _context5.next = 4;\n                break;\n\n              case 19:\n                _context5.next = 25;\n                break;\n\n              case 21:\n                _context5.prev = 21;\n                _context5.t0 = _context5[\"catch\"](2);\n                _didIteratorError4 = true;\n                _iteratorError4 = _context5.t0;\n\n              case 25:\n                _context5.prev = 25;\n                _context5.prev = 26;\n\n                if (!(!_iteratorNormalCompletion4 && _iterator4.return != null)) {\n                  _context5.next = 30;\n                  break;\n                }\n\n                _context5.next = 30;\n                return _awaitAsyncGenerator(_iterator4.return());\n\n              case 30:\n                _context5.prev = 30;\n\n                if (!_didIteratorError4) {\n                  _context5.next = 33;\n                  break;\n                }\n\n                throw _iteratorError4;\n\n              case 33:\n                return _context5.finish(30);\n\n              case 34:\n                return _context5.finish(25);\n\n              case 35:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, null, [[2, 21, 25, 35], [26,, 30, 34]]);\n      }));\n\n      return function (_x3, _x4) {\n        return _ref3.apply(this, arguments);\n      };\n    }()),\n    _getAsyncIterator: get,\n    id: callbackify.variadic(require('./id')(config)),\n    key: require('./key')(config),\n    log: require('./log')(config),\n    ls: callbackify.variadic(function (path, options) {\n      return collectify(ls)(path, options);\n    }),\n    lsReadableStream: streamify.readable(ls),\n    lsPullStream: pullify.source(ls),\n    _lsAsyncIterator: ls,\n    mount: callbackify.variadic(require('./mount')(config)),\n    name: require('./name')(config),\n    object: require('./object')(config),\n    pin: require('./pin')(config),\n    ping: callbackify.variadic(collectify(ping)),\n    pingReadableStream: streamify.readable(ping),\n    pingPullStream: pullify.source(ping),\n    pubsub: require('./pubsub')(config),\n    refs: callbackify.variadic(function (path, options) {\n      return collectify(refs)(path, options);\n    }),\n    refsReadableStream: streamify.readable(refs),\n    refsPullStream: pullify.source(refs),\n    _refsAsyncIterator: refs,\n    repo: require('./repo')(config),\n    resolve: callbackify.variadic(require('./resolve')(config)),\n    stats: require('./stats')(config),\n    stop: callbackify.variadic(require('./stop')(config)),\n    shutdown: callbackify.variadic(require('./stop')(config)),\n    swarm: require('./swarm')(config),\n    version: callbackify.variadic(require('./version')(config))\n  };\n  Object.assign(api.refs, {\n    local: callbackify.variadic(function (options) {\n      return collectify(refs.local)(options);\n    }),\n    localReadableStream: streamify.readable(refs.local),\n    localPullStream: pullify.source(refs.local),\n    _localAsyncIterator: refs.local\n  });\n  return api;\n}\n\nObject.assign(ipfsClient, {\n  isIPFS: isIPFS,\n  Buffer: Buffer,\n  CID: CID,\n  multiaddr: multiaddr,\n  multibase: multibase,\n  multicodec: multicodec,\n  multihash: multihash,\n  PeerId: PeerId,\n  PeerInfo: PeerInfo\n});\nmodule.exports = ipfsClient;","map":null,"metadata":{},"sourceType":"script"}