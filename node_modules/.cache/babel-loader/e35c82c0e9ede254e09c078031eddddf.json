{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/home/eth/ipfs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _awaitAsyncGenerator = require(\"/home/eth/ipfs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/home/eth/ipfs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"/home/eth/ipfs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar PeerId = require('peer-id');\n\nvar PeerInfo = require('peer-info');\n\nvar multiaddr = require('multiaddr');\n\nvar ndjson = require('iterable-ndjson');\n\nvar configure = require('../lib/configure');\n\nvar toIterable = require('../lib/stream-to-iterable');\n\nmodule.exports = configure(function (_ref) {\n  var ky = _ref.ky;\n  return (\n    /*#__PURE__*/\n    function () {\n      var _findProvs = _wrapAsyncGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(cid, options) {\n        var searchParams, res, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, message, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _loop, _iterator2, _step2;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                options = options || {};\n                searchParams = new URLSearchParams(options.searchParams);\n                searchParams.set('arg', \"\".concat(cid));\n                if (options.numProviders) searchParams.set('num-providers', options.numProviders);\n                if (options.verbose != null) searchParams.set('verbose', options.verbose);\n                _context2.next = 7;\n                return _awaitAsyncGenerator(ky.post('dht/findprovs', {\n                  timeout: options.timeout,\n                  signal: options.signal,\n                  headers: options.headers,\n                  searchParams: searchParams\n                }));\n\n              case 7:\n                res = _context2.sent;\n                _iteratorNormalCompletion = true;\n                _didIteratorError = false;\n                _context2.prev = 10;\n                _iterator = _asyncIterator(ndjson(toIterable(res.body)));\n\n              case 12:\n                _context2.next = 14;\n                return _awaitAsyncGenerator(_iterator.next());\n\n              case 14:\n                _step = _context2.sent;\n                _iteratorNormalCompletion = _step.done;\n                _context2.next = 18;\n                return _awaitAsyncGenerator(_step.value);\n\n              case 18:\n                _value = _context2.sent;\n\n                if (_iteratorNormalCompletion) {\n                  _context2.next = 50;\n                  break;\n                }\n\n                message = _value;\n\n                if (!(message.Type === 4 && message.Responses)) {\n                  _context2.next = 47;\n                  break;\n                }\n\n                _iteratorNormalCompletion2 = true;\n                _didIteratorError2 = false;\n                _iteratorError2 = undefined;\n                _context2.prev = 25;\n                _loop =\n                /*#__PURE__*/\n                _regeneratorRuntime.mark(function _loop() {\n                  var _step2$value, ID, Addrs, peerInfo;\n\n                  return _regeneratorRuntime.wrap(function _loop$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          _step2$value = _step2.value, ID = _step2$value.ID, Addrs = _step2$value.Addrs;\n                          peerInfo = new PeerInfo(PeerId.createFromB58String(ID));\n                          if (Addrs) Addrs.forEach(function (a) {\n                            return peerInfo.multiaddrs.add(multiaddr(a));\n                          });\n                          _context.next = 5;\n                          return peerInfo;\n\n                        case 5:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _loop);\n                });\n                _iterator2 = message.Responses[Symbol.iterator]();\n\n              case 28:\n                if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {\n                  _context2.next = 33;\n                  break;\n                }\n\n                return _context2.delegateYield(_loop(), \"t0\", 30);\n\n              case 30:\n                _iteratorNormalCompletion2 = true;\n                _context2.next = 28;\n                break;\n\n              case 33:\n                _context2.next = 39;\n                break;\n\n              case 35:\n                _context2.prev = 35;\n                _context2.t1 = _context2[\"catch\"](25);\n                _didIteratorError2 = true;\n                _iteratorError2 = _context2.t1;\n\n              case 39:\n                _context2.prev = 39;\n                _context2.prev = 40;\n\n                if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                  _iterator2.return();\n                }\n\n              case 42:\n                _context2.prev = 42;\n\n                if (!_didIteratorError2) {\n                  _context2.next = 45;\n                  break;\n                }\n\n                throw _iteratorError2;\n\n              case 45:\n                return _context2.finish(42);\n\n              case 46:\n                return _context2.finish(39);\n\n              case 47:\n                _iteratorNormalCompletion = true;\n                _context2.next = 12;\n                break;\n\n              case 50:\n                _context2.next = 56;\n                break;\n\n              case 52:\n                _context2.prev = 52;\n                _context2.t2 = _context2[\"catch\"](10);\n                _didIteratorError = true;\n                _iteratorError = _context2.t2;\n\n              case 56:\n                _context2.prev = 56;\n                _context2.prev = 57;\n\n                if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                  _context2.next = 61;\n                  break;\n                }\n\n                _context2.next = 61;\n                return _awaitAsyncGenerator(_iterator.return());\n\n              case 61:\n                _context2.prev = 61;\n\n                if (!_didIteratorError) {\n                  _context2.next = 64;\n                  break;\n                }\n\n                throw _iteratorError;\n\n              case 64:\n                return _context2.finish(61);\n\n              case 65:\n                return _context2.finish(56);\n\n              case 66:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee, null, [[10, 52, 56, 66], [25, 35, 39, 47], [40,, 42, 46], [57,, 61, 65]]);\n      }));\n\n      function findProvs(_x, _x2) {\n        return _findProvs.apply(this, arguments);\n      }\n\n      return findProvs;\n    }()\n  );\n});","map":null,"metadata":{},"sourceType":"script"}